{"version":3,"sources":["webpack://ei2030/./src/pages/groups/{WorkingGroupPage.workingGroupName}/{WorkingGroupPage.fileName}.js"],"names":["data","workingGroupPage","workingGroupPages","workingGroup","markdownRemark","html","title","frontmatter","groupIndex","find","fileName","groupPages","filter","to","activeStyle","textDecoration","path","workingGroupName","map","key","style","display","marginLeft","dangerouslySetInnerHTML","__html"],"mappings":"oIA2DA,UAvDA,YAUI,IAAD,IATDA,KACEC,iBACkBC,EAOnB,EAPGC,aAAgBD,kBAOnB,IANGE,eACEC,EAKL,EALKA,KACeC,EAIpB,EAJKC,YAAeD,MAKfE,EAAaN,EAAkBO,MACnC,kBAA+B,UAA/B,EAAGC,YAECC,EAAaT,EAAkBU,QACnC,kBAA+B,UAA/B,EAAGF,YAEL,OACE,2BACE,gBAAC,KAAD,CAAMG,GAAG,KAAT,eACA,0BACE,gBAAC,KAAD,CAAMC,YAAa,CAAEC,eAAgB,QAAUF,GAAIL,EAAWQ,MAA9D,kBACkBR,EAAWS,mBAG/B,0BACGN,EAAWO,KACV,gBAEmBZ,EAFnB,EACEF,eACEG,YAAeD,MAEjBU,EAJF,EAIEA,KACAN,EALF,EAKEA,SALF,OAOE,sBACES,IAAKb,EACLc,MAAO,CAAEC,QAAS,eAAgBC,WAAY,QAE9C,gBAAC,KAAD,CAAMT,GAAIG,EAAMF,YAAa,CAAEC,eAAgB,SAC5CT,GAASI,QAMpB,0BAAKJ,GACL,uBAAKiB,wBAAyB,CAAEC,OAAQnB","file":"component---src-pages-groups-working-group-page-working-group-name-working-group-page-file-name-js-d112a950ba3af77b59b4.js","sourcesContent":["import React from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport PropTypes from \"prop-types\";\n\nfunction WorkingGroupPage({\n  data: {\n    workingGroupPage: {\n      workingGroup: { workingGroupPages },\n      markdownRemark: {\n        html,\n        frontmatter: { title },\n      },\n    },\n  },\n}) {\n  const groupIndex = workingGroupPages.find(\n    ({ fileName }) => fileName === \"index\"\n  );\n  const groupPages = workingGroupPages.filter(\n    ({ fileName }) => fileName !== \"index\"\n  );\n  return (\n    <div>\n      <Link to=\"/\">EI2030 Home</Link>\n      <h2>\n        <Link activeStyle={{ textDecoration: \"none\" }} to={groupIndex.path}>\n          Working Group: {groupIndex.workingGroupName}\n        </Link>\n      </h2>\n      <ul>\n        {groupPages.map(\n          ({\n            markdownRemark: {\n              frontmatter: { title },\n            },\n            path,\n            fileName,\n          }) => (\n            <li\n              key={title}\n              style={{ display: \"inline-block\", marginLeft: \"1em\" }}\n            >\n              <Link to={path} activeStyle={{ textDecoration: \"none\" }}>\n                {title || fileName}\n              </Link>\n            </li>\n          )\n        )}\n      </ul>\n      <h1>{title}</h1>\n      <div dangerouslySetInnerHTML={{ __html: html }} />\n    </div>\n  );\n}\n\nWorkingGroupPage.propTypes = {\n  data: PropTypes.object,\n};\n\nexport default WorkingGroupPage;\n\n// This is the page query that connects the data to the actual component. Here you can query for any and all fields\n// you need access to within your code. Again, since Gatsby always queries for `id` in the collection, you can use that\n// to connect to this GraphQL query\nexport const query = graphql`\n  query($id: String) {\n    workingGroupPage(id: { eq: $id }) {\n      markdownRemark {\n        html\n        frontmatter {\n          title\n        }\n      }\n      workingGroup {\n        workingGroupPages {\n          fileName\n          path: gatsbyPath(\n            filePath: \"/groups/{WorkingGroupPage.workingGroupName}/{WorkingGroupPage.fileName}\"\n          )\n          workingGroupName\n          markdownRemark {\n            frontmatter {\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}